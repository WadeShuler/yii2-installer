#!/usr/bin/env php
<?php
/**
 * Yii Application Installer Tool
 *
 * In order to run in non-interactive mode:
 *
 * init --env=Development --overwrite=n
 *
 * @author Wade Shuler
 *
 * @link https://github.com/WadeShuler
 * @copyright Copyright (c) 2016 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

// latest known working version ( in case of issues with new releases )
define('YII_CURRENT_VERSION', '2.0.8');

if (!extension_loaded('openssl')) {
    die('The OpenSSL PHP extension is required by Yii2.');
}

$params = getParams();
$root = str_replace('\\', '/', __DIR__);

$templates = [ 'basic', 'advanced' ];
$templatesList = implode(', ', $templates);     // nice list for messages

$installers = ['composer', 'git', 'zip'];
$installersList = implode(', ', $installers);   // nice list for messages

// add my print banner here
echo "Yii Application Installer Tool v1.0\n\n";



// --> Template Selection



// Choose the template
$userTemplate = null;
if ( empty($params['template']) )
{
    echo "\nWhich Yii2 application template do you want to install?\n\n";

    foreach ($templates as $i => $name) {
        echo "  [$i] $name\n";
    }

    echo "\n  Your choice [0-" . (count($templates) - 1) . ', press enter for "basic", or "q" to quit] ';

    $answer = trim(fgets(STDIN));

    if ( $answer == '' )
    {
        // empty, so basic chosen
        $answer = array_search('basic', $templates);    // find key for 'basic' in $templates array
        $userTemplate = 'basic';

    } else if (!ctype_digit($answer) || !in_array($answer, range(0, count($templates) - 1))) {

        // unrecognized answer
        $answer = null;
        $userTemplate = null;
        echo "\n  Quit installation.\n";
        exit(0);

    } else if (isset($templates[$answer])) {
        $userTemplate = $templates[$answer];
    }

} else {

    $userTemplate = trim($params['template']);

}

// template failsafe
if ( ! validateTemplate($userTemplate, $templates) ) {
    exit("\n  $userTemplate is not a valid template. Try one of the following: $templatesList. \n");
}



// --> Version Selection



// choose version number
$userVersion = null;
if (empty($params['version']))
{
    echo "\nWhich Yii2 application version do you want to install?\n";

    echo "\n  Type a version number [press enter for latest (" . YII_CURRENT_VERSION . "), or \"q\" to quit] ";

    $answer = trim(fgets(STDIN));

     if ( $answer == '' ) {

        // enter (latest version)
        $userVersion = YII_CURRENT_VERSION;

    } else if ( $answer == strtolower('q') ) {

            // q (quit) was entered
            $answer = null;
            $userVersion = null;
            echo "\n  Quit installation.\n";
            exit(0);

    } else {

        // not empty, not a 'q', must be a version (we handle validation later)
        $userVersion = $answer;
    }

} else {

    $userVersion = trim($params['version']);

}

// version failsafe
if ( ! validateVersion($userVersion) ) {
    exit("\n The version you entered is greater than the current tested version, and is not supported!\n");
}



// --> Installer Selection



// choose install method
$userInstaller = null;
if ( empty($params['installer']) )
{
    echo "\nWhich install method do you want to use?\n\n";

    foreach ($installers as $i => $name) {
        echo "  [$i] $name\n";
    }

    echo "\n  Your choice [0-" . (count($installers) - 1) . ', press enter for "composer", or "q" to quit] ';

    $answer = trim(fgets(STDIN));

    if ( $answer == '' )
    {
        // empty, so composer chosen
        $answer = array_search('composer', $installers);    // find key for 'composer' in $installers array
        $userInstaller = 'composer';

    } else if (!ctype_digit($answer) || !in_array($answer, range(0, count($installers) - 1))) {

        // unrecognized answer
        $answer = null;
        $userInstaller = null;
        echo "\n  Quit installation.\n";
        exit(0);

    } else if (isset($installers[$answer])) {
        $userInstaller = $installers[$answer];
    }

} else {

    $userInstaller = trim($params['installer']);

}

// installer failsafe
if ( ! validateInstaller($userInstaller, $installers) ) {
    exit("\n  $userInstaller is not a valid template. Try one of the following: $installersList. \n");
}



// --> Review Options



echo "\n\nYour Choices\n\n";
echo " Template: $userTemplate\n";
echo " Version: $userVersion\n";
echo " Installer: $userInstaller\n\n";


// confirm choices
$userConfirm = null;
if (empty($params['confirm']))
{
    echo "\nDo you want to continue with these choices? (yes, no, or quit)\n\n";

    $answer = trim(fgets(STDIN));

     if ( $answer == '' || $answer == strtolower('y') || $answer == strtolower('yes') ) {

        // enter (latest version)
        $userConfirm = true;

    } else if ( $answer == strtolower('n') || $answer == strtolower('no') || $answer == strtolower('q') || $answer == strtolower('quit') ) {

            // no, n, q, or quit was entered
            $answer = null;
            $userConfirm = null;
            echo "\n  Quit installation.\n";
            exit(0);

    } else {

        // invalid option
        $answer = null;
        $userConfirm = null;
        echo "\n  Quit installation.\n";
        exit(0);
    }

} else {

    $userConfirm = trim($params['confirm']);

}

if ( ! validateUserConfirm($userConfirm) ) {
    echo "\n Quit installation.\n";
}

echo "\n\nConfirmed, lets go!\n\n";

exit;


// -------- LEFT OFF HERE ---------

// user interaction complete
// now have to actually make it do something :)







// -- Functions ---

function getFileList($root, $basePath = '')
{
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.git' || $path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params)
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }
    if (is_file($root . '/' . $target)) {
        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
        return true;
    }
    echo "   generate $target\n";
    @mkdir(dirname($root . '/' . $target), 0777, true);
    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
    return true;
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}

function setWritable($root, $paths)
{
    foreach ($paths as $writable) {
        if (is_dir("$root/$writable")) {
            echo "      chmod 0777 $writable\n";
            @chmod("$root/$writable", 0777);
        } else {
            echo "\n  Error. Directory $writable does not exist. \n";
        }
    }
}

function setExecutable($root, $paths)
{
    foreach ($paths as $executable) {
        echo "      chmod 0755 $executable\n";
        @chmod("$root/$executable", 0755);
    }
}

function setCookieValidationKey($root, $paths)
{
    foreach ($paths as $file) {
        echo "   generate cookie validation key in $file\n";
        $file = $root . '/' . $file;
        $length = 32;
        $bytes = openssl_random_pseudo_bytes($length);
        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');
        $content = preg_replace('/(("|\')cookieValidationKey("|\')\s*=>\s*)(""|\'\')/', "\\1'$key'", file_get_contents($file));
        file_put_contents($file, $content);
    }
}

function createSymlink($root, $links) {
    foreach ($links as $link => $target) {
        echo "      symlink " . $root . "/" . $target . " " . $root . "/" . $link . "\n";
        //first removing folders to avoid errors if the folder already exists
        @rmdir($root . "/" . $link);
        //next removing existing symlink in order to update the target
        if (is_link($root . "/" . $link)) {
            @unlink($root . "/" . $link);
        }
        @symlink($root . "/" . $target, $root . "/" . $link);
    }
}

// --> Added Functions (diff from old init)

function countVersionDots($version)
{
    return substr_count($version, '.');
}

function compareYiiVersions($checkVersion, $yiiVersion, $operator = '>')
{
    $numDotsVersion = countVersionDots($checkVersion);
    $numDotsVersionYii = countVersionDots($yiiVersion);

    $diff = 0;
    if ( $numDotsVersion < $numDotsVersionYii ) {
        $diff = $numDotsVersionYii - $numDotsVersion;

        for ( $i = 0; $i <= $diff; $i++ ) {
            $checkVersion .= '.0';
        }
    }

    if ( $numDotsVersion > $numDotsVersionYii ) {
        $diff = $numDotsVersion - $numDotsVersionYii;
        for ( $i = 0; $i < $diff; $i++ ) {
            $yiiVersion .= '.0';
        }
    }

    if ( countVersionDots($checkVersion) != countVersionDots($yiiVersion) ) {
        exit("\n Unable to validate version number!\n\n");
    }

    return version_compare($checkVersion, $yiiVersion, $operator);

}

function validateTemplate($userTemplate, $templates)
{
    return in_array($userTemplate, $templates) ? true : false;
}

// validate version number: if user version greater than tested Yii version
// @TODO Maybe replace with more efficient version validation
function validateVersion($version)
{
    return compareYiiVersions($version, YII_CURRENT_VERSION, '>') ? false : true;
}

function validateInstaller($userInstaller, $installers)
{
    return in_array($userInstaller, $installers) ? true : false;
}

function validateUserConfirm($confirmation)
{
    return ( $confirmation === true ) ? true : false;
}
